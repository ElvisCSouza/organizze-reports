@page "/"
@using OrganizzeReports.Integration.Dtos;
@using OrganizzeReports.Integration;
@inject OrganizzeReports.Integration.IOrganizzeApi organizzeApi;


<div class="row">
    <div class="col-md-6">
        <h3>Remover categorias</h3>
        <RadzenCard style="overflow: auto;height:500px;">
            @foreach (var categoria in Categorias.OrderBy(x => x.NomeCategoriaPai).ThenBy(x => x.NomeCategoria))
            {
                <RadzenCheckBox Change="@(args => RemoverCategoria(args, categoria.Id))" Style="margin-bottom: 20px" TValue="bool" />
                <RadzenLabel Text="@(categoria.NomeCategoriaPai + " -> " +  categoria.NomeCategoria)" Style="margin-left: 5px;margin-bottom: 20px" />
                <br />
            }
        </RadzenCard>
    </div>
    <div class="col-md-6">
        <h3>Remover contas</h3>
        <RadzenCard style="overflow: auto;height:500px;">
            @foreach (var categoria in organizzeApi.ContasBancarias().Result.OrderBy(x => x.name))
            {
                <RadzenCheckBox Change="@(args => RemoverContas(args, categoria.id))" Style="margin-bottom: 20px" TValue="bool" />
                <RadzenLabel Text="@categoria.name" Style="margin-left: 5px;margin-bottom: 20px" />
                <br />
            }
        </RadzenCard>
    </div>
</div>


<h1>Gastos do mês comparado ao mês pasado</h1>
<div class="row">
    <div class="col-md-12 col-sm-12 p-4">
        <RadzenChart>
            <RadzenLineSeries Smooth="false" Data="@debitosMesCorrente" CategoryProperty="Dia" Title="Mês atual" LineType="LineType.Dashed" ValueProperty="DebitoAcumulado">
                <RadzenMarkers MarkerType="MarkerType.Square" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="false" Data="@debitosMesAnterior" CategoryProperty="Dia" Title="Mês passado" ValueProperty="DebitoAcumulado">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
            </RadzenLineSeries>
            <RadzenLineSeries Smooth="false" Data="@debitos2MesesAtras" CategoryProperty="Dia" Title="2 meses anterior" ValueProperty="DebitoAcumulado">
                <RadzenMarkers MarkerType="MarkerType.Circle" />
            </RadzenLineSeries>
            <RadzenCategoryAxis Padding="20" />
            <RadzenValueAxis>
                <RadzenGridLines Visible="true" />
                <RadzenAxisTitle Text="Total de Débito" />
            </RadzenValueAxis>
        </RadzenChart>
    </div>
</div>

@code {


    List<int> CategoriasRemovidas;
    List<int> ContasRemovidas;
    List<DataItem> debitosMesCorrente;
    List<DataItem> debitosMesAnterior;
    List<DataItem> debitos2MesesAtras;
    List<Categoria> Categorias;

    List<Transaction> transacoesMesCorrente;
    List<Transaction> transacoesMesAnterior;
    List<Transaction> transacoes2mesesAtras;
    class DataItem
    {
        public int Dia { get; set; }
        public decimal DebitoAcumulado { get; set; }
    }
    class Categoria
    {
        public int Id { get; set; }
        public string NomeCategoriaPai { get; set; }
        public string NomeCategoria { get; set; }
    }

    void CarregarCategoria()
    {
        Categorias = new List<Categoria>();
        var categoriasResult = organizzeApi.Categorias().Result;

        foreach(var categoriaResult in categoriasResult.Where(x => x.parent_id.GetValueOrDefault() > 0))
        {
            Categorias.Add(new Categoria()
            {
                NomeCategoria = categoriaResult.name,
                NomeCategoriaPai = categoriasResult.First(x => x.id == categoriaResult.parent_id.Value).name
            }); ;

        }
    }

    void RemoverCategoria(bool remover, int categoria_id)
    {
        if (!remover)
            CategoriasRemovidas.Remove(categoria_id);
        else
            CategoriasRemovidas.Add(categoria_id);

        CarregarGrafico();
    }

    void RemoverContas(bool remover, int categoria_id)
    {
        if (!remover)
            ContasRemovidas.Remove(categoria_id);
        else
            ContasRemovidas.Add(categoria_id);

        CarregarGrafico();
    }

    void CarregarGrafico()
    {
        debitosMesCorrente = new List<DataItem>();
        debitosMesAnterior = new List<DataItem>();
        debitos2MesesAtras = new List<DataItem>();

        for (int i = 1; i <= 31 && i <= DateTime.Now.Day; i++)
        {
            debitosMesCorrente.Add(new DataItem()
            {
                Dia = i,
                DebitoAcumulado = (decimal)((transacoesMesCorrente
                                                .Where(x => x.amount_cents < 0
                                                         && x.created_at.Day <= i
                                                         && x.oposite_account_id == null
                                                         && x.paid_credit_card_id == null
                                                         && !CategoriasRemovidas.Any(c => c == x.category_id)
                                                         && !ContasRemovidas.Any(c => c == x.account_id)
                                                         && !x.tags.Any(t => t.name == "Reforma 2020")
                                                         )

                                                .Sum(x => x.amount_cents) * -1)
                                                / 100)
            });
        }

        for (int i = 1; i <= 31; i++)
        {
            debitosMesAnterior.Add(new DataItem()
            {
                Dia = i,
                DebitoAcumulado = (decimal)((transacoesMesAnterior
                                                .Where(x => x.amount_cents < 0
                                                         && x.created_at.Day <= i
                                                         && !CategoriasRemovidas.Any(c => c == x.category_id)
                                                         && !ContasRemovidas.Any(c => c == x.account_id)
                                                         && x.oposite_account_id == null
                                                         && x.paid_credit_card_id == null)
                                                .Sum(x => x.amount_cents) * -1)
                                                / 100)
            });

            debitos2MesesAtras.Add(new DataItem()
            {
                Dia = i,
                DebitoAcumulado = (decimal)((transacoes2mesesAtras
                                                .Where(x => x.amount_cents < 0
                                                         && x.created_at.Day <= i
                                                         && !CategoriasRemovidas.Any(c => c == x.category_id)
                                                         && !ContasRemovidas.Any(c => c == x.account_id)
                                                         && x.oposite_account_id == null
                                                         && x.paid_credit_card_id == null)
                                                .Sum(x => x.amount_cents) * -1)
                                                / 100)
            });
        }
    }

    protected override void OnInitialized()
    {
        CategoriasRemovidas = new List<int>();
        ContasRemovidas = new List<int>();

        transacoesMesCorrente = organizzeApi.Transacoes().Result;

        var anoMesPassado = DateTime.Now.AddMonths(-1).Year;
        var mesMesPassado = DateTime.Now.AddMonths(-1).Month;
        transacoesMesAnterior = organizzeApi.Transacoes(
            new DateTime(anoMesPassado, mesMesPassado, 1).ToString("yyyy-MM-dd"),
            new DateTime(anoMesPassado, mesMesPassado, DateTime.DaysInMonth(anoMesPassado, mesMesPassado)).ToString("yyyy-MM-dd")
                                ).Result;

        var ano2MesesAtras = DateTime.Now.AddMonths(-2).Year;
        var mes2MesesAtras = DateTime.Now.AddMonths(-2).Month;
        transacoes2mesesAtras = organizzeApi.Transacoes(
        new DateTime(ano2MesesAtras, mes2MesesAtras, 1).ToString("yyyy-MM-dd"),
        new DateTime(ano2MesesAtras, mes2MesesAtras, DateTime.DaysInMonth(ano2MesesAtras, mes2MesesAtras)).ToString("yyyy-MM-dd")
                            ).Result;


        CarregarCategoria();
        CarregarGrafico();
    }
}
